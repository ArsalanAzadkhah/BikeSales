

--            Write a query to retrieve all product names and their corresponding brand names 
--            same as category name.

SELECT products.*,brands.brand_name, categories.category_name FROM products
JOIN brands ON brands.brand_id = products.brand_id 
JOIN categories ON products.category_iD = categories.category_id;

--            Find active staff: Write a query to find all active staff members and their store names.

SELECT staffs.staff_id,first_name,last_name,staffs.email,staffs.phone,stores.store_name FROM staffs
JOIN stores
ON staffs.store_id = stores.store_id

--            Product categories: Write a query to count the number of products in each category.

select products.category_id, categories.category_name, count(products.category_id) AS "total_amount" 
from products
JOIN categories ON products.category_id = categories.category_id
group by products.category_id, categories.category_name
order by products.category_id

--            Orders by customer: Write a query to list the total number of orders placed 
--            by each customer.

select orders.customer_id,customers.first_name,customers.last_name, count(order_id) AS total_order
from orders
JOIN customers ON orders.customer_id = customers.customer_id
group by orders.customer_id, customers.first_name,customers.last_name
ORDER BY total_order DESC


-- 	Total sales per product: Write a query to calculate the total sales amount for each product
--      (considering quantity, list price, and discount).

SELECT product_id, ROUND(SUM((list_price * (1-discount))*quantity)::decimal,2) AS total_sales 
FROM order_items
GROUP BY product_id

-- 	Orders by status: Write a query to count the number of orders for each order status.

SELECT order_status, SUM(order_id) AS total_order  
FROM orders
GROUP BY order_status

-- 	Customer orders: Write a query to list all customers who have placed at least one order,
--      including their full name and total number of orders.

SELECT orders.customer_id, customers.first_name, customers.last_name, 
	   SUM(orders.order_id) AS total_orders  
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY orders.customer_id, customers.first_name, customers.last_name
ORDER BY orders.customer_id

-- 	Stock availability: Write a query to find the total quantity of each product 
--      available in all stores.

SELECT stocks.product_id, products.product_name,
	   SUM(stocks.quantity) AS total_amount
FROM stocks
JOIN products ON stocks.product_id = products.product_id
GROUP BY stocks.product_id, products.product_name

-- 	Revenue by store: Write a query to calculate the total revenue generated by each store.

SELECT stores.store_id, 
	   SUM(CAST ( ( list_price * (1-discount) * quantity ) AS DECIMAL))
FROM orders
JOIN stores on stores.store_id = orders.store_id
JOIN order_items on order_items.order_id = orders.order_id
group by stores.store_id


-- 	Monthly sales analysis: Write a query to calculate the total sales amount for each month.

SELECT  TO_CHAR(order_date, 'Month') AS "Month",
		SUM(quantity) AS total_sales,
		EXTRACT (month from order_Date)
FROM orders
JOIN order_items ON orders.order_id = order_items.order_id 
GROUP BY TO_CHAR(order_date, 'Month'), EXTRACT (MONTH FROM order_Date)
ORDER BY EXTRACT (MONTH FROM order_Date) 

-- 	Top customers: Write a query to find the top 5 customers who have spent the most money.

SELECT 	customers.customer_id,customers.first_name,customers.last_name,
		CAST(SUM ((list_price*(1-discount))*quantity) AS NUMERIC(10,2)) AS total_amount
FROM order_items
JOIN orders ON order_items.order_id = orders.order_id
JOIN customers ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id,customers.first_name,customers.last_name
ORDER BY total_amount DESC
LIMIT 5

-- 	Product performance: Write a query to determine which products have the highest sales 
--      volume in the current year.

SELECT 	product_name, 
		EXTRACT(year from orders.shipped_date) AS "year",
		SUM(quantity) AS total_sales 
FROM order_items
JOIN products ON products.product_id = order_items.product_id
JOIN orders ON orders.order_id = order_items.order_id
GROUP BY products.product_name
HAVING 	EXTRACT(year from orders.shipped_date) IS NOT NULL AND
		EXTRACT(year from orders.shipped_date) = 2018 
ORDER BY total_sales DESC